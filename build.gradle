import org.springframework.boot.gradle.tasks.run.BootRun

buildscript {
    ext {
        springBootVersion = '2.7.14'
        springCloudBomVersion = "2021.0.8"
    }
    repositories {
        mavenLocal()
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("net.serenity-bdd:serenity-gradle-plugin:2.5.7")
    }
}

plugins {
    id 'application'
    id 'checkstyle'
    id 'com.github.ben-manes.versions' version '0.47.0'
    id 'info.solidsoft.pitest' version '1.9.11'
    id 'io.spring.dependency-management' version '1.0.12.RELEASE'
    id 'jacoco'
    id 'org.flywaydb.flyway' version '9.19.4'
    id 'org.owasp.dependencycheck' version '8.0.2'
    id 'org.sonarqube' version '3.2.0'
    id 'org.springframework.boot' version "2.7.14"
    id 'au.com.dius.pact' version '4.1.8'
    id 'uk.gov.hmcts.java' version '0.12.27'
}

apply plugin: 'checkstyle'
apply plugin: 'net.serenity-bdd.aggregator'

jacoco {
    toolVersion = "0.8.7"
}

group = 'uk.gov.hmcts.reform.divorce'
version = '3.0.0'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

checkstyle.toolVersion = '8.32'
checkstyle.configFile = new File(rootDir, "checkstyle.xml")
checkstyle.maxWarnings(0)

// make build fail on Checkstyle issues (https://github.com/gradle/gradle/issues/881)
tasks.withType(Checkstyle).each { checkstyleTask ->
    checkstyleTask.doLast {
        reports.all { report ->
            def outputFile = report.destination
            if (outputFile.exists() && outputFile.text.contains("<error ")) {
                throw new GradleException("There were checkstyle warnings! For more info check $outputFile")
            }
        }
    }
}

bootJar {
    manifest {
        attributes 'Implementation-Title': project.name,
                'Implementation-Version': project.version
    }
    archiveName 'div-fees-and-payment-service.jar'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.boot:spring-boot-dependencies:${springBootVersion}"
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudBomVersion}"
    }
    dependencies {
        dependency group: 'commons-beanutils', name: 'commons-beanutils', version: '1.9.4'

        dependency group: 'org.bouncycastle', name: 'bcprov-jdk15on', version: '1.68'

        dependency group: 'org.glassfish', name: 'jakarta.el', version: '3.0.4'

        //CVE-2021-44228, CVE-2021-44832, CVE-2021-45046, CVE-2021-45105
        dependencySet(group: 'org.apache.logging.log4j', version: '2.19.0') {
            entry 'log4j-api'
            entry 'log4j-to-slf4j'
        }

        //CVE-2022-22965
        dependencySet(group: 'org.springframework', version: '5.3.29') {
            entry 'spring-aop'
            entry 'spring-beans'
            entry 'spring-context'
            entry 'spring-context-support'
            entry 'spring-core'
            entry 'spring-expression'
            entry 'spring-jcl'
            entry 'spring-web'
            entry 'spring-webmvc'
        }

        dependencySet(group: 'com.fasterxml.jackson.core', version: '2.13.3') {
            entry 'jackson-core'
            entry 'jackson-databind'
            entry 'jackson-annotations'
        }

        dependencySet(group: 'org.yaml', version: '1.33') {
            entry 'snakeyaml'
        }
    }
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDirs = ['src/integrationTest/java']
        }
        resources {
            srcDirs = ['src/integrationTest/resources']
        }
    }
    contractTest {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
            srcDir file('src/contractTest/java')
        }
        resources.srcDir file('src/contractTest/resources')
    }
}

configurations {
    integrationTestImplementation.extendsFrom(testImplementation)
    integrationTestRuntimeOnly.extendsFrom(testRuntimeOnly)
    functionalTestImplementation.extendsFrom(testImplementation)
    functionalTestRuntimeOnly.extendsFrom(testRuntimeOnly)
    contractTestImplementation.extendsFrom(testImplementation)
    contractTestRuntimeOnly.extendsFrom(testRuntimeOnly)
}

mainClassName = 'uk.gov.hmcts.reform.divorce.feepayment.FeesPaymentServiceApplication'

compileJava {
    options.compilerArgs << '-parameters' << '-Xlint:deprecation'
}

compileTestJava {
    options.compilerArgs << '-Xlint:deprecation'
}

repositories {
    mavenCentral()
    jcenter()
    maven { url 'https://repo.spring.io/libs-milestone' }
    maven { url "https://repo.maven.apache.org/maven2" }
    maven { url "https://jitpack.io" }
}

distributions {
    main {
        contents {
            from(file("$projectDir/lib/AI-Agent.xml")) {
                into "lib"
            }
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

pitest {
    targetClasses = ['uk.gov.hmcts.reform.divorce.feepayment.*']
    excludedClasses = ['uk.gov.hmcts.reform.divorce.feepayment.health.*',
                       'uk.gov.hmcts.reform.divorce.feepayment.management.config.*',
                       'uk.gov.hmcts.reform.divorce.feepayment.config.*',
                       'uk.gov.hmcts.reform.divorce.feepayment.model.*']
    threads = 10
    outputFormats = ['XML', 'HTML']
    timestampedReports = false
    mutationThreshold = 80
}

processTestResources {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

processContractTestResources {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

processIntegrationTestResources {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
    // Specifies if the build should be failed if a CVSS score above a specified level is identified.
    // range of 0-10 fails the build, anything greater and it doesn't fail the build
    failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
    suppressionFile = 'dependency-check-suppressions.xml'
    analyzers {
        // Disable scanning of .NET related binaries
        assemblyEnabled = false
    }
}

def versions = [
        commonsBeanUtils:                               '1.9.4',
        commonsIo:                                      '2.7',
        commonsLang3:                                   '3.9',
        gradlePitest:                                   '1.4.6',
        guava:                                          '32.1.2-jre',
        hibernate:                                      '6.0.5.Final',
        jackson:                                        '2.13.2',
        javaxValidation:                                '2.0.0.Final',
        jaywayJsonPath:                                 '2.4.0',
        jsonassert:                                     '1.2.3',
        junit:                                          '4.13.2',
        lombok:                                         '1.18.28',
        nimbusJoseJwt:                                  '8.5',
        pitest:                                         '1.4.10',
        puppyCrawl:                                     '8.35',
        reformsJavaLogging:                             '5.1.7',
        restAssured:                                    '4.2.1',
        serviceTokenGenerator:                          '3.1.1',
        serenity:                                       '2.5.8',
        serenityCucumber:                               '1.9.51',
        serviceAuthProviderClient:                      '3.1.1',
        sonarPitest:                                    '0.5',
        springBoot:                                     '2.7.14',
        springDoc:                                      '1.6.9',
        springPluginCore:                               '3.0.0',
        springSecurityCrypto:                           '5.4.5',
        springSecurityRsa:                              '1.0.9.RELEASE',
        tomcat:                                         '9.0.80',
        wiremockVersion:                                '2.27.2',
        unirest:                                        '1.4.9',
        pact_version:                                   '4.1.11',
        jetty:                                          '9.4.35.v20201120',
        httpComponents:                                 '4.5.13',
        logbackVersion:                                 '1.2.10',
        reformLogging:                                  '6.0.1'
]

tasks.withType(JavaExec).configureEach {
    javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
}

tasks.named('test', Test) {
    useJUnitPlatform()

    testLogging {
        exceptionFormat = 'full'
    }
}

test {
    useJUnit()
    failFast = true
}



dependencies {
    compileOnly("org.projectlombok:lombok:${versions.lombok}")
    testCompileOnly("org.projectlombok:lombok:${versions.lombok}")
    testImplementation('com.github.hmcts:fortify-client:1.2.0:all')
    annotationProcessor("org.projectlombok:lombok:${versions.lombok}")
    testAnnotationProcessor("org.projectlombok:lombok:${versions.lombok}")
    testImplementation("junit:junit:${versions.junit}")
    testImplementation('org.springframework.boot:spring-boot-starter-test')
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    //integration test
    integrationTestImplementation(sourceSets.test.output)
    integrationTestImplementation group: 'com.mashape.unirest', name: 'unirest-java', version: versions.unirest
    integrationTestImplementation group: 'com.nimbusds', name: 'nimbus-jose-jwt', version: versions.nimbusJoseJwt
    integrationTestImplementation group: 'io.rest-assured', name: 'rest-assured', version: versions.restAssured
    integrationTestImplementation group: 'io.rest-assured', name: 'rest-assured-all', version: versions.restAssured
    integrationTestImplementation group: 'org.apache.commons', name: 'commons-lang3', version: versions.commonsLang3
    integrationTestImplementation group: 'org.projectlombok', name: 'lombok', version: versions.lombok
    integrationTestImplementation group: 'org.skyscreamer', name:'jsonassert', version: versions.jsonassert
    integrationTestImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
    integrationTestImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test'
    integrationTestImplementation group: 'com.sun.xml.bind', name: 'jaxb-osgi', version: '3.0.1'
    integrationTestImplementation group: 'net.serenity-bdd', name: 'serenity-core', version: versions.serenity
    integrationTestImplementation group: 'net.serenity-bdd', name: 'serenity-cucumber', version: versions.serenityCucumber
    integrationTestImplementation group: 'net.serenity-bdd', name: 'serenity-junit', version: versions.serenity
    integrationTestImplementation group: 'net.serenity-bdd', name: 'serenity-rest-assured', version: versions.serenity
    integrationTestImplementation group: 'net.serenity-bdd', name: 'serenity-spring', version: versions.serenity
    integrationTestImplementation group: 'uk.gov.hmcts.reform', name:'service-auth-provider-client', version: versions.serviceAuthProviderClient
    functionalTestImplementation group: 'org.projectlombok', name: 'lombok', version: versions.lombok

    implementation group: 'commons-beanutils', name: 'commons-beanutils', version: versions.commonsBeanUtils
    implementation group: 'org.springframework.security', name: 'spring-security-rsa', version: versions.springSecurityRsa
    implementation group: 'org.springframework.security', name: 'spring-security-crypto', version: versions.springSecurityCrypto
    implementation group: 'org.apache.tomcat.embed', name:'tomcat-embed-core', version: versions.tomcat
    implementation group: 'org.apache.tomcat.embed', name:'tomcat-embed-websocket', version: versions.tomcat
    implementation group: 'org.apache.tomcat.embed', name:'tomcat-embed-el', version: versions.tomcat

    implementation (group: 'uk.gov.hmcts.reform', name:'service-auth-provider-client', version: versions.serviceTokenGenerator){
        exclude group: 'io.reactivex', module: 'io.reactivex'
        exclude group: 'io.reactivex', module: 'rxnetty'
        exclude group: 'io.reactivex', module: 'rxnetty-contexts'
        exclude group: 'io.reactivex', module: 'rxnetty-servo'
    }

    implementation("org.springframework.boot:spring-boot-devtools")
    annotationProcessor("org.projectlombok:lombok:${versions.lombok}")
    implementation("org.projectlombok:lombok:$versions.lombok")
    testImplementation group: 'org.projectlombok', name: 'lombok', version: versions.lombok

    implementation group: 'commons-io', name: 'commons-io', version: versions.commonsIo
    implementation group: 'com.nimbusds', name: 'nimbus-jose-jwt', version: versions.nimbusJoseJwt
    implementation group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.2'
    implementation group: 'com.google.guava', name: 'guava', version: versions.guava
    implementation group: 'com.jayway.jsonpath', name: 'json-path-assert', version: versions.jaywayJsonPath
    implementation group: 'com.puppycrawl.tools', name: 'checkstyle', version: versions.puppyCrawl
    implementation group: 'org.springdoc', name: 'springdoc-openapi-ui', version: versions.springDoc
    implementation group: 'io.swagger.core.v3', name: 'swagger-annotations', version: '2.2.15'
    implementation group: 'info.solidsoft.gradle.pitest', name: 'gradle-pitest-plugin', version: versions.gradlePitest
    implementation group: 'javax.validation', name: 'validation-api', version: versions.javaxValidation
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: versions.commonsLang3
    testImplementation group: 'junit', name: 'junit', version: versions.junit
    implementation group: 'org.codehaus.sonar-plugins', name:'sonar-pitest-plugin', version: versions.sonarPitest
    implementation group: 'org.hibernate', name: 'hibernate-validator', version: versions.hibernate
    implementation group: 'org.pitest', name: 'pitest', version: versions.pitest

    implementation group: 'ch.qos.logback', name: 'logback-classic', version: versions.logbackVersion
    implementation group: 'ch.qos.logback', name: 'logback-core', version: versions.logbackVersion

    implementation group: 'org.springframework.boot', name: 'spring-boot-devtools', version: versions.springBoot
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator', version: versions.springBoot
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-aop', version: versions.springBoot
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: versions.springBoot
    integrationTestImplementation(group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign')
            {
                exclude group: 'io.reactivex', module: 'io.reactivex'
                exclude group: 'io.reactivex', module: 'rxnetty'
                exclude group: 'io.reactivex', module: 'rxnetty-contexts'
                exclude group: 'io.reactivex', module: 'rxnetty-servo'
            }
    // DO NOT UPDATE spring-plugin-core - 2.0.0.RELEASE is available but not compatible with springfox 2.9 and above
    // see here https://github.com/springfox/springfox/issues/2932
    implementation group: 'org.springframework.plugin', name: 'spring-plugin-core', version: versions.springPluginCore
    implementation group: 'org.springframework.retry', name: 'spring-retry'

    implementation group: 'uk.gov.hmcts.reform', name: 'logging', version: versions.reformsJavaLogging
    implementation group: 'com.github.hmcts.java-logging', name: 'logging', version: versions.reformLogging
    implementation group: 'uk.gov.hmcts.reform', name: 'logging-appinsights', version: versions.reformsJavaLogging
    implementation group: 'uk.gov.hmcts.reform', name: 'logging-httpcomponents', version: versions.reformsJavaLogging
    implementation group: 'uk.gov.hmcts.reform', name: 'logging-spring', version: versions.reformsJavaLogging
    implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: versions.httpComponents
    implementation group: 'org.apache.httpcomponents', name: 'fluent-hc', version: versions.httpComponents
    implementation("org.springdoc:springdoc-openapi-ui") {
        exclude group: "org.yaml", module: "snakeyaml"
    }

    testImplementation group: 'com.github.tomakehurst', name:'wiremock', version: versions.wiremockVersion
    testImplementation(group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: versions.springBoot) {
        exclude(module: 'commons-logging')
    }
    testImplementation('com.github.hmcts:fortify-client:1.2.0:all')

    contractTestImplementation("org.junit.jupiter:junit-jupiter-api:5.9.3")
    contractTestImplementation("org.junit.jupiter:junit-jupiter-engine:5.7.2")
    contractTestImplementation('org.junit.jupiter:junit-jupiter-api:5.9.3')

    contractTestImplementation group: 'org.apache.httpcomponents', name: 'httpclient', version: versions.httpComponents
    contractTestImplementation group: 'org.apache.httpcomponents', name: 'fluent-hc', version: versions.httpComponents
    contractTestImplementation group: 'au.com.dius.pact.consumer', name: 'junit5', version: versions.pact_version
    contractTestImplementation group: 'au.com.dius.pact.consumer', name: 'java8', version: versions.pact_version
    contractTestImplementation group: 'au.com.dius.pact.consumer', name: 'junit5', version: versions.pact_version
    contractTestImplementation group: 'au.com.dius.pact.consumer', name: 'java8', version: versions.pact_version

    contractTestImplementation sourceSets.main.runtimeClasspath
    contractTestImplementation sourceSets.test.runtimeClasspath
}

dependencies {
    integrationTestImplementation(sourceSets.test.output)
    functionalTestImplementation(sourceSets.test.output)
}

task smoke(type: Test, description: 'Runs the smoke tests.', group: 'Verification') {
    useJUnit {
        includeCategories 'uk.gov.hmcts.reform.divorce.feepayment.smoketest.SmokeTest'
    }
}

task bootRunAat(type: BootRun, description: 'Runs the app using AAT config', dependsOn: 'classes', group: 'Application') {
    doFirst() {
        classpath = sourceSets.main.runtimeClasspath
        systemProperties = System.properties
        systemProperty 'spring.profiles.active', 'aat'
    }
}



task functional(type: Test, description: 'Runs the functional tests.', group: 'Verification') {
    doFirst(){
        printf("Available processors:::::::::: " + Runtime.runtime.availableProcessors().intdiv(2).toString())
    }

    maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
    forkEvery = 10

    exclude "uk/gov/hmcts/reform/divorce/feepayment/callback/nightly/pipeline/**"

    setTestClassesDirs(sourceSets.integrationTest.output.classesDirs)
    setClasspath(sourceSets.integrationTest.runtimeClasspath)

    useJUnit()

    finalizedBy aggregate
}
task contract(type: Test) {
    group = 'Delivery pipeline'
    description = 'Pact consumer tests for Fee Register'
    useJUnitPlatform()
    testClassesDirs = sourceSets.contractTest.output.classesDirs
    classpath = sourceSets.contractTest.runtimeClasspath
    include "uk/gov/hmcts/reform/divorce/feeandpaymentservice/**"
    systemProperty 'pact.rootDir', "pacts"
    environment("APPINSIGHTS_INSTRUMENTATIONKEY", "test-key")

}

//below task for pipeline
task runAndPublishConsumerPactTests(type: Test){
    logger.lifecycle("Runs consumer contract tests for Fee register client")
    testClassesDirs = sourceSets.contractTest.output.classesDirs
    classpath = sourceSets.contractTest.runtimeClasspath

}

runAndPublishConsumerPactTests.dependsOn contract

runAndPublishConsumerPactTests.finalizedBy pactPublish

project.ext {
    pacticipant = 'divorce_feeAndPaymentService_feeRegister'
    pacticipantVersion = getCheckedOutGitCommitHash()
}

def getCheckedOutGitCommitHash() {
    'git rev-parse --verify --short HEAD'.execute().text.trim()
}

pact {
    broker {
        pactBrokerUrl = System.getenv("PACT_BROKER_URL") ?: 'http://localhost:80'
    }
    publish {
        pactDirectory = 'build/pacts'
        tags = [System.getenv("PACT_BRANCH_NAME") ?:'Dev']
        version = project.pacticipantVersion
    }
}

jacocoTestReport {
    executionData(test)

    reports {
        xml.enabled = true
        html.enabled = true
        xml.destination file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
    }
}

project.tasks['sonarqube'].dependsOn jacocoTestReport

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.9
            }
        }
    }
}

def sonarExclusions = [
        '**uk/gov/hmcts/reform/divorce/feepayment/model/*',
        '**uk/gov/hmcts/reform/divorce/feepayment/FeesPaymentServiceApplication.java'
]

sonarqube {
    properties {
        property "sonar.projectKey", "DivorceFeesAndPaymentsService"
        property "sonar.projectName", "Divorce :: Fees and Payments Service"
        property "sonar.exclusions", sonarExclusions.join(", ")
        property "sonar.coverage.jacoco.xmlReportPaths", "${jacocoTestReport.reports.xml.destination.path}"
        property "sonar.pitest.mode", "reuseReport"
        property "sonar.pitest.reportsDirectory", "build/reports/pitest"
    }
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}

def debug = System.getProperty("debug")
run {
    if (debug == 'true') {
        jvmArgs = ['-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5010']
    }
}

task fortifyScan(type: JavaExec)  {
    main = "uk.gov.hmcts.fortifyclient.FortifyClientMainApp"
    classpath += sourceSets.test.runtimeClasspath
    jvmArgs = ['--add-opens=java.base/java.lang.reflect=ALL-UNNAMED']
}

